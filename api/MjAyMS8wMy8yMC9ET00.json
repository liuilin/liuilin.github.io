{"title":"DOM","date":"2021-03-20T08:41:29.000Z","date_formatted":{"ll":"2021年3月20日","L":"2021/03/20","MM-DD":"03-20"},"link":"2021/03/20/DOM","comments":true,"updated":"2022-11-16T02:30:28.830Z","content":"<ol>\n<li>\n<p>DOM 是一棵树（tree）</p>\n</li>\n<li>\n<p>树上有 Node</p>\n<p>Node 分为 Document（html）、Element（元素）和 Text（文本），以及其他不重要的。</p>\n</li>\n<li>\n<p>Node 的接口</p>\n<p>i. 属性 childNodes,firstChild,innerText,lastChild,nextSibling,nodeName,nodeType,nodeValue,outerText,ownerDocument,parentElement,parentNode,previousSibling,textContent</p>\n<p>如果记不住就背下以下单词：</p>\n<ul>\n<li>\n<p>child /children/parent</p>\n</li>\n<li>\n<p>node</p>\n</li>\n<li>\n<p>first /last</p>\n</li>\n<li>\n<p>next /previous</p>\n</li>\n<li>\n<p>sibling /siblings</p>\n</li>\n<li>\n<p>type</p>\n</li>\n<li>\n<p>value /text/content</p>\n</li>\n<li>\n<p>inner /outer</p>\n</li>\n<li>\n<p>element</p>\n</li>\n</ul>\n<p>然后互相组合</p>\n<p>ii. 方法（如果一个属性是函数，那么这个属性就也叫做方法；换言之，方法是函数属性）</p>\n<ul>\n<li>appendChild ()</li>\n<li>cloneNode ()</li>\n<li>contains ()</li>\n<li>hasChildNodes ()</li>\n<li>insertBefore ()</li>\n<li>isEqualNode ()</li>\n<li>isSameNode ()</li>\n<li>removeChild ()</li>\n<li>replaceChild ()</li>\n<li>normalize () // 常规化&gt; 搞清楚英文单词的意思就知道用法</li>\n</ul>\n<blockquote>\n<p>如果发现知道英文后依然不明白用法，看 MDN 的例子即可，如 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/normalize\" target=\"_blank\">normalize</a></p>\n<p>DOM APi 无外乎「增删改查」</p>\n</blockquote>\n</li>\n<li>\n<p>Document 接口</p>\n<p>属性</p>\n<ul>\n<li>anchors</li>\n<li>body</li>\n<li>characterSet</li>\n<li>childElementCount</li>\n<li>children</li>\n<li>doctype</li>\n<li>documentElement</li>\n<li>domain</li>\n<li>fullscreen</li>\n<li>head</li>\n<li>hidden</li>\n<li>images</li>\n<li>links</li>\n<li>location</li>\n<li>onxxxxxxxxx</li>\n<li>origin</li>\n<li>plugins</li>\n<li>readyState</li>\n<li>referrer</li>\n<li>scripts</li>\n<li>scrollingElement</li>\n<li>styleSheets</li>\n<li>title</li>\n<li>visibilityState</li>\n</ul>\n<p>方法：</p>\n<ul>\n<li>\n<p>close ()</p>\n</li>\n<li>\n<p>createDocumentFragment ()</p>\n</li>\n<li>\n<p>createElement ()</p>\n</li>\n<li>\n<p>createTextNode ()</p>\n</li>\n<li>\n<p>execCommand ()</p>\n</li>\n<li>\n<p>exitFullscreen ()</p>\n</li>\n<li>\n<p>getElementById ()</p>\n</li>\n<li>\n<p>getElementsByClassName ()</p>\n</li>\n<li>\n<p>getElementsByName ()</p>\n</li>\n<li>\n<p>getElementsByTagName ()</p>\n</li>\n<li>\n<p>getSelection ()</p>\n</li>\n<li>\n<p>hasFocus ()</p>\n</li>\n<li>\n<p>open ()</p>\n</li>\n<li>\n<p>querySelector ()</p>\n</li>\n<li>\n<p>querySelectorAll ()</p>\n</li>\n<li>\n<p>registerElement ()</p>\n</li>\n<li>\n<p>write ()</p>\n</li>\n<li>\n<p>writeln ()</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Element 的接口</p>\n</li>\n<li>\n<p>DOM API 反人类</p>\n<p>i. 获取元素</p>\n<p>以前之后 document.getElementById, document.getElementsByTagName, document.getElementsByClassName太反人类，于是有了 jQuery 后来DOM API 终于抄袭 jQuery 提供了 document.querySelector 和 document.querySelectorAll 但是依然没有 jQuery 好用，因为「不一致」</p>\n<p>ii. 获取下一个元素</p>\n<p>获取兄弟们</p>\n</li>\n</ol>\n","prev":{"title":"CSS","link":"2021/03/20/CSS"},"next":{"title":"GitHub 搭建个人博客","link":"2021/03/20/GitHub 搭建个人博客"},"plink":"https://blog.liumulin.top/2021/03/20/DOM/","reward":true,"copyright":{"custom":"不许转载😡！！！"}}