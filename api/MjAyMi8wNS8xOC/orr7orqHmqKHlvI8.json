{"title":"设计模式","date":"2022-05-18T14:55:47.000Z","date_formatted":{"ll":"2022年5月18日","L":"2022/05/18","MM-DD":"05-18"},"link":"2022/05/18/设计模式","comments":true,"updated":"2022-11-16T02:30:28.838Z","content":"<h1 id=\"设计模式\">设计模式<a title=\"#设计模式\" href=\"#设计模式\"></a></h1>\n<p><img src=\"https://cdn.jsdelivr.net/gh/liuilin/image-bed@latest/blog/img/design-pattern-stories.jpeg\" alt=\"design-pattern-stories\" class=\"φbs\"></p>\n<h2 id=\"创建型\">创建型<a title=\"#创建型\" href=\"#创建型\"></a></h2>\n<h3 id=\"1.-工厂方法\">1. 工厂方法<a title=\"#1.-工厂方法\" href=\"#1.-工厂方法\"></a></h3>\n<p>定义：定义一个创建对象的接口，但让实现这个接口的类来决定实例化哪个类， 工厂方法让类的实例化推迟到子类进行</p>\n<blockquote>\n<p>如果都是未知的方法，就用接口定义</p>\n<p>如果某些行为或属性是已知的（已知的实现），那就要抽象方法</p>\n</blockquote>\n<h3 id=\"2.-抽象工厂\">2. 抽象工厂<a title=\"#2.-抽象工厂\" href=\"#2.-抽象工厂\"></a></h3>\n<p>定义：1. 抽象工厂模式提供一个创建一系列相关或相互依赖对象的接口。2. 无需指定他们具体的类</p>\n<p>适用场景：</p>\n<ul>\n<li>客户端（应用层）不依赖于产品类实例如何被创建，实现等细节</li>\n<li>强调一系列相关的产品对象（属于同一产品族）一起使用创建对象需要大量重复代码</li>\n<li>提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现</li>\n</ul>\n<p>优点：</p>\n<ul>\n<li>具体产品在应用层代码隔离，无需关心创建细节</li>\n<li>将一个系列的产品族统一到一起创建</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>规定了所有可能被创建的产品集合，产品族中扩展新的产品困难，需要修改抽象工厂的接口</li>\n<li>增加了系统的抽象性和理解难度</li>\n</ul>\n<blockquote>\n<p>解决产品族的问题（美的热水器、冰箱、洗衣机为同一产品族）</p>\n</blockquote>\n<h3 id=\"3.\">3.<a title=\"#3.\" href=\"#3.\"></a></h3>\n<h2 id=\"结构性\">结构性<a title=\"#结构性\" href=\"#结构性\"></a></h2>\n<p>代理模式：MyBatis 代理</p>\n<h2 id=\"行为型\">行为型<a title=\"#行为型\" href=\"#行为型\"></a></h2>\n<p>策略模式：模拟营销折扣，包括折扣券</p>\n","prev":{"title":"优雅编写博客 - Typora+jsDelivr+Picgo+TinyPNG 实现图片压缩加速上传图床","link":"2022/05/18/优雅编写博客-Typora-jsDelivr-Picgo-TinyPNG-实现图片压缩加速上传图床"},"next":{"title":"bad interpreter: /usr/bin/python3:  no such file or directory 错误解决 ","link":"2021/06/10/bad-interpreter-usr-bin-python3-no-such-file-or-directory-错误解决"},"plink":"https://blog.liumulin.top/2022/05/18/设计模式/","toc":[{"id":"设计模式","title":"设计模式","index":"1","children":[{"id":"创建型","title":"创建型","index":"1.1","children":[{"id":"1.-工厂方法","title":"1. 工厂方法","index":"1.1.1"},{"id":"2.-抽象工厂","title":"2. 抽象工厂","index":"1.1.2"},{"id":"3.","title":"3.","index":"1.1.3"}]},{"id":"结构性","title":"结构性","index":"1.2"},{"id":"行为型","title":"行为型","index":"1.3"}]}],"reward":true,"copyright":{"custom":"不许转载😡！！！"}}