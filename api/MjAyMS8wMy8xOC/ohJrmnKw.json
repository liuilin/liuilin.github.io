{"title":"脚本","date":"2021-03-18T08:41:29.000Z","date_formatted":{"ll":"2021年3月18日","L":"2021/03/18","MM-DD":"03-18"},"link":"2021/03/18/脚本","comments":true,"tags":["Script"],"updated":"2022-11-16T02:30:28.837Z","content":"<h1 id=\"脚本\">脚本<a title=\"#脚本\" href=\"#脚本\"></a></h1>\n<h3 id=\"理解脚本\">理解脚本<a title=\"#理解脚本\" href=\"#理解脚本\"></a></h3>\n<p>如果你打开一本JavaScript教程，那么很可能在第一章就看到这句话：</p>\n<blockquote>\n<p>JavaScript 是一门动态类型、面向对象的脚本语言</p>\n</blockquote>\n<p>其实脚本原本来自戏剧舞台，比如下面这个脚本：</p>\n<blockquote>\n<p>公馆一室内<br>\n王妈：（小心翼翼地）小姐，您还是得注意身子，就吃点东西吧。<br>\n鸡小姐：（把碗砸在地上）不吃，我就是不吃。<br>\n（王妈下）</p>\n</blockquote>\n<p>脚本主要由人物对话和舞台提示组成。演员和道具组只需要按照脚本说的做即可</p>\n<p>编程领域的脚本也是类似的，计算机只要照着脚本上说的做即可，比如下面这个脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/Desktop</span><br><span class=\"line\">mkdir demo</span><br><span class=\"line\"><span class=\"built_in\">cd</span> demo</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;hi&quot;</span>&gt;index.html</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/Desktop</span><br></pre></td></tr></table></figure>\n<p>所以说，脚本就是给计算机照着做的。这是我们对「脚本！的一个感性认识。接下来我们写一个脚本。</p>\n<h3 id=\"写一个脚本\">写一个脚本<a title=\"#写一个脚本\" href=\"#写一个脚本\"></a></h3>\n<ol>\n<li>\n<p>找个地方新建文件，后缀随意，一般来说脚本的后缀是 .sh，但是我偏要把后缀写成 .txt。我喜欢把脚本放在 ~/local 目录里。（我知道你没有这个目录，创建一下这个目录就行啦）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~/<span class=\"built_in\">local</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/<span class=\"built_in\">local</span></span><br><span class=\"line\">touch demo.txt</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>编辑 demo.txt，内容如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir demo</span><br><span class=\"line\"><span class=\"built_in\">cd</span> demo</span><br><span class=\"line\">mkdir css js</span><br><span class=\"line\">touch index.html css/style.css js/main.js</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>（Windows 用户请跳过这一步）给 demo.txt 添加执行权限 chmod +x demo.txt</p>\n</li>\n<li>\n<p>在任意位置执行 sh ~/local/demo.txt 即可运行此脚本</p>\n<ul>\n<li>cd ~/Desktop</li>\n<li>sh ~/local/demo.txt</li>\n<li>你会看到当前目录里多出一个 demo 目录，demo 目录里面还有一些文件<br>\n好了，这个 demo.txt 就是你写出的第一个 Bash 脚本了。</li>\n</ul>\n</li>\n<li>\n<p>将 ~/local 添加到 PATH 里</p>\n<ul>\n<li>cd ~/local; pwd 得到 local 的绝对路径</li>\n<li>创建 ~/.bashrc：touch ~/.bashrc</li>\n<li>编辑 ~/.bashrc：start ~/.bashrc</li>\n<li>在编辑器里添加一行字： export PATH=“local的绝对路径:$PATH”</li>\n<li>source ~/.bashrc</li>\n<li>之前你要运行 sh ~/local/demo.txt，现在你只需要运行 demo.txt 就行了（想想为什么，道理显而易见）</li>\n</ul>\n</li>\n<li>\n<p>demo.txt 的后缀 .txt 很无聊，删掉它</p>\n<ul>\n<li>mv ~/local/demo.txt ~/local/demo</li>\n<li>现在你只要运行 demo 就能执行该脚本了</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"细节\">细节<a title=\"#细节\" href=\"#细节\"></a></h3>\n<ol>\n<li>PATH 的作用：你每次在 Bash 里面输入一个命令时（比如 ls、cp、demo），Bash 都会去 PATH 列表里面寻找对应的文件，如果找到了就执行。</li>\n<li>使用 type demo 可以看到寻找过程</li>\n<li>使用 which demo 可以看到寻找结果</li>\n<li>文件后缀的作用：毫无作用你以为一个文件以 .exe 结尾就一定可以双击吗？你以为一个文件以 .png 结尾就一定是图片吗？图样图森破！</li>\n</ol>\n<h3 id=\"参数\">参数<a title=\"#参数\" href=\"#参数\"></a></h3>\n<p>demo 脚本只能创建名字为 demo 的目录，太无聊了，我们让目录名是可变的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir <span class=\"variable\">$1</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$1</span></span><br><span class=\"line\">mkdir css js</span><br><span class=\"line\">touch index.html css/style.css js/main.js</span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>$1 表示你传的第一个参数。</p>\n</blockquote>\n<p>老师你怎么知道 $1 表示第一个参数？</p>\n<blockquote>\n<p>好问题，答案是我 Google 出来的 <a href=\"http://lmgtfy.com/?q=bash+first+param\">http://lmgtfy.com/?q=bash+first+param</a><br>\n用百度也行 <a href=\"http://www.baidu-x.com/?q=bash+%E7%AC%AC%E4%B8%80%E4%B8%AA+%E5%8F%82%E6%95%B0\">http://www.baidu-x.com/?q=bash+第一个+参数</a></p>\n</blockquote>\n<h3 id=\"判断目录是否已存在\">判断目录是否已存在<a title=\"#判断目录是否已存在\" href=\"#判断目录是否已存在\"></a></h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ -d <span class=\"variable\">$1</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&#x27;error: dir exists&#x27;</span></span><br><span class=\"line\">\t<span class=\"built_in\">exit</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    mkdir <span class=\"variable\">$1</span></span><br><span class=\"line\">    <span class=\"built_in\">cd</span> <span class=\"variable\">$1</span></span><br><span class=\"line\">    mkdir css js</span><br><span class=\"line\">    touch index.html css/style.css js/main.js</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;success&#x27;</span></span><br><span class=\"line\">\t<span class=\"built_in\">exit</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>老师，你怎么知道 -d $1 可以判断目录是否存在？<br>\n我 Google 出来的 <a href=\"http://lmgtfy.com/?q=bash+dir+exists\">http://lmgtfy.com/?q=bash+dir+exists</a></p>\n</blockquote>\n<h3 id=\"返回值\">返回值<a title=\"#返回值\" href=\"#返回值\"></a></h3>\n<ul>\n<li>exit 0 表示没有错误</li>\n<li>exit 1 表示错误代码为 1</li>\n</ul>\n<blockquote>\n<p>demo &amp;&amp; echo ‘结束’</p>\n</blockquote>\n<p>只有在 demo 成功时，才会执行 echo ‘结束’.</p>\n<h3 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h3>\n<ol>\n<li>脚本就是给机器一行一行执行的文本</li>\n<li>Bash 脚本有Bash脚本的语法，Node.js 脚本有JS语法</li>\n<li>不管是那种脚本，能实现的功能都差不多，只是语法不同</li>\n<li>Bash脚本的语法挺奇葩的，比如$1$#等符号5.不同特别去学Bash 脚本的用法，遇到不会的就 Google、</li>\n<li>不同特别去学Node.js 脚本的用法，遇到不会的就 Google</li>\n<li>新人写代码最大的问题就是「抄错了」多写了一个空格，少写了一个空格，单词拼错了，没有加分号，多加了分号</li>\n</ol>\n<h3 id=\"写自己的脚本\">写自己的脚本<a title=\"#写自己的脚本\" href=\"#写自己的脚本\"></a></h3>\n<p>把Linux上的配置文件写成脚本上传到GitHub，要执行的时候下载即可（检查执行权限）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L http://github.com/xx/xx.sh</span><br><span class=\"line\">./xx.sh</span><br></pre></td></tr></table></figure>","prev":{"title":"简历","link":"2021/03/18/简历"},"next":{"title":"MySQL练习","link":"2021/03/09/MySQL练习"},"plink":"https://blog.liumulin.top/2021/03/18/脚本/","toc":[{"id":"脚本","title":"脚本","index":"1","children":[{"id":"理解脚本","title":"理解脚本","index":"1.1"},{"id":"写一个脚本","title":"写一个脚本","index":"1.2"},{"id":"细节","title":"细节","index":"1.3"},{"id":"参数","title":"参数","index":"1.4"},{"id":"判断目录是否已存在","title":"判断目录是否已存在","index":"1.5"},{"id":"返回值","title":"返回值","index":"1.6"},{"id":"总结","title":"总结","index":"1.7"},{"id":"写自己的脚本","title":"写自己的脚本","index":"1.8"}]}],"reward":true,"copyright":{"custom":"不许转载😡！！！"}}