{"title":"vim-config","date":"2021-03-19T08:41:29.000Z","date_formatted":{"ll":"2021年3月19日","L":"2021/03/19","MM-DD":"03-19"},"link":"2021/03/19/vim-config","comments":true,"tags":["vim"],"updated":"2022-11-16T02:30:28.835Z","content":"<p>&quot;  __  __        __     _____ __  __ ____   ____<br>\n&quot; |  /  |_   _  \\ \\   / /_ <em>|  /  |  _ \\ / <em><em><em>|<br>\n&quot; | |/| | | | |  \\ \\ / / | || |/| | |</em>) | |<br>\n&quot; | |  | | |</em>| |   \\ V /  | || |  | |  _ &lt;| |</em></em>_<br>\n&quot; |<em>|  |</em>|_<em>, |    _/  |</em><em><em>|</em>|  |</em>|<em>| _\\</em><em><strong>|<br>\n&quot;         |</strong></em>/</p>\n<p>&quot; Todos<br>\n&quot; - vimwiki<br>\n&quot; - pylint reports error when doing <code>vim ~/Github/vim-calc/build-up/calc.py</code><br>\n&quot;   instead of doing <code>cd ~/Github/vim-calc/build-up</code> and then do <code>vim calc.py</code><br>\n&quot; - hotkey to switch between light theme and dark theme (in progress, still<br>\n&quot;   some bugs</p>\n<p>&quot; ===<br>\n&quot; === Auto load for first time uses<br>\n&quot; ===<br>\nif empty(glob(‘~/.vim/autoload/plug.vim’))<br>\nsilent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs<br>\n\\ <a href=\"https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\">https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</a><br>\nautocmd VimEnter * PlugInstall --sync | source $MYVIMRC<br>\nendif</p>\n<p>&quot; ====================<br>\n&quot; === Editor Setup ===<br>\n&quot; ====================</p>\n<p>&quot; ===<br>\n&quot; === System<br>\n&quot; ===<br>\nset nocompatible<br>\nfiletype on<br>\nfiletype indent on<br>\nfiletype plugin on<br>\nfiletype plugin indent on<br>\nset mouse=a<br>\nset encoding=utf-8</p>\n<p>set clipboard=unnamed</p>\n<p>&quot; Prevent incorrect backgroung rendering<br>\nlet &amp;t_ut=‘’</p>\n<p>&quot; ===<br>\n&quot; === Main code display<br>\n&quot; ===<br>\nset number<br>\nset relativenumber<br>\nset ruler<br>\nset cursorline<br>\nsyntax enable<br>\nsyntax on</p>\n<p>&quot; ===<br>\n&quot; === Editor behavior<br>\n&quot; ===<br>\n&quot; Better tab<br>\nset expandtab<br>\nset tabstop=2<br>\nset shiftwidth=2<br>\nset softtabstop=2<br>\nset list<br>\nset listchars=tab:▸\\ ,trail:▫<br>\nset scrolloff=5 &quot; 页面上下多5行</p>\n<p>&quot; Prevent auto line split<br>\nset wrap<br>\nset tw=0</p>\n<p>set indentexpr=<br>\n&quot; Better backspace<br>\nset backspace=indent,eol,start</p>\n<p>set foldmethod=indent<br>\nset foldlevel=99</p>\n<p>&quot; let &amp;t_si = “&lt;esc&gt;]50;cursorshape=1\\x7”<br>\n&quot; let &amp;t_sr = “&lt;esc&gt;]50;cursorshape=2\\x7”<br>\n&quot; let &amp;t_ei = “&lt;esc&gt;]50;cursorshape=0\\x7”</p>\n<p>&quot; ===<br>\n&quot; === Window behaviors<br>\n&quot; ===<br>\nset splitright<br>\nset splitbelow</p>\n<p>&quot; ===<br>\n&quot; === Status/command bar<br>\n&quot; ===<br>\nset laststatus=2<br>\nset autochdir<br>\nset showcmd<br>\nset formatoptions-=tc</p>\n<p>&quot; Show command autocomplete<br>\nset wildignore=log/<strong>,node_modules/</strong>,target/<strong>,tmp/</strong>,*.rbc<br>\nset wildmenu                                                 &quot; show a navigable menu for tab completion<br>\nset wildmode=longest,list,full</p>\n<p>&quot; Searching options<br>\nset hlsearch<br>\nexec “nohlsearch”<br>\nset incsearch<br>\nset ignorecase<br>\nset smartcase</p>\n<p>&quot; ===<br>\n&quot; === Restore Cursor Position<br>\n&quot; ===<br>\nau BufReadPost * if line(“'”“) &gt; 1 &amp;&amp; line(”‘“”) &lt;= line(“$”) | exe &quot;normal! g’“” | endif</p>\n<p>&quot; ===<br>\n&quot; === Basic Mappings<br>\n&quot; ===</p>\n<p>&quot; Set <LEADER> as <SPACE><br>\nlet mapleader=&quot; &quot;</p>\n<p>&quot; Column (:) mods<br>\nmap ; :<br>\nmap q; q:<br>\nmap <LEADER>/ :!<br>\nmap <LEADER>r :r !<br>\nmap <LEADER>sr :%s/</p>\n<p>&quot; Save &amp; quit<br>\nmap Q :q<CR><br>\nmap S :w<CR></p>\n<p>&quot; Open the vimrc file anytime<br>\nmap <LEADER>rc :e ~/.vim/vimrc<CR></p>\n<p>&quot; Undo operations<br>\n&quot; noremap l u<br>\n&quot; Undo in Insert mode<br>\ninoremap <C-l> <C-u></p>\n<p>&quot; Insert Key<br>\n&quot; noremap k i<br>\n&quot; noremap K I</p>\n<p>&quot; Copy to system clipboard<br>\nvnoremap Y :w !xclip -i -sel c<CR></p>\n<p>&quot; Search<br>\nmap <LEADER><CR> :nohlsearch<CR><br>\nnoremap = nzz<br>\nnoremap - Nzz</p>\n<p>&quot; Duplicate words<br>\nmap <LEADER>fd /(&lt;\\w+&gt;)_s*\\1</p>\n<p>&quot; Others<br>\nmap <LEADER>o o<Esc>u</p>\n<p>&quot; ===<br>\n&quot; === Cursor Movement<br>\n&quot; ===<br>\n&quot;<br>\n&quot; New cursor movement (the default arrow keys are used for resizing windows)<br>\n&quot;     ^<br>\n&quot;     u<br>\n&quot; &lt; n   i &gt;<br>\n&quot;     e<br>\n&quot;     v<br>\n&quot; noremap u k<br>\n&quot; noremap n h<br>\n&quot; noremap e j<br>\n&quot; noremap i l<br>\n&quot; U/E keys for 5 times u/e (faster navigation)<br>\nnoremap U 5k<br>\nnoremap E 5j<br>\n&quot; N key: go to the start of the line<br>\n&quot; noremap N 0<br>\n&quot; I key: go to the end of the line<br>\n&quot; noremap I $</p>\n<p>&quot; Faster in-line navigation<br>\nnoremap W 5w<br>\nnoremap B 5b<br>\n&quot; set h (same as n, cursor left) to ‘end of word’<br>\n&quot; noremap h e</p>\n<p>&quot; Ctrl + U or E will move up/down the view port without moving the cursor<br>\nnoremap <C-U> 5<C-y><br>\nnoremap <C-E> 5<C-e><br>\ninoremap <C-U> <Esc>5<C-y>a<br>\ninoremap <C-E> <Esc>5<C-e>a</p>\n<p>&quot; ===<br>\n&quot; === Window management<br>\n&quot; ===<br>\n&quot; Use <space> + new arrow keys for moving the cursor around windows<br>\nmap <LEADER>w <C-w>w<br>\nmap <LEADER>u <C-w>k<br>\nmap <LEADER>e <C-w>j<br>\nmap <LEADER>n <C-w>h<br>\nmap <LEADER>i <C-w>l<br>\n&quot;map <LEADER>r <C-w>r</p>\n<p>&quot; Disabling the default s key<br>\nnoremap s <nop></p>\n<p>&quot; split the screens to up (horizontal), down (horizontal), left (vertical), right (vertical)<br>\nmap su :set nosplitbelow<CR>:split<CR>:set splitbelow<CR><br>\nmap se :set splitbelow<CR>:split<CR><br>\nmap sn :set nosplitright<CR>:vsplit<CR>:set splitright<CR><br>\nmap si :set splitright<CR>:vsplit<CR></p>\n<p>&quot; Resize splits with arrow keys<br>\nmap <up> :res +5<CR><br>\nmap <down> :res -5<CR><br>\nmap <left> :vertical resize-5<CR><br>\nmap <right> :vertical resize+5<CR></p>\n<p>&quot; Place the two screens up and down<br>\nnoremap sh <C-w>t<C-w>K<br>\n&quot; Place the two screens side by side<br>\nnoremap sv <C-w>t<C-w>H</p>\n<p>&quot; Rotate screens<br>\nnoremap srh <C-w>b<C-w>K<br>\nnoremap srv <C-w>b<C-w>H</p>\n<p>&quot; ===<br>\n&quot; === Tab management<br>\n&quot; ===<br>\n&quot; Create a new tab with tu<br>\nmap tu :tabe<CR><br>\n&quot; Move around tabs with tn and ti<br>\nmap tn :-tabnext<CR><br>\nmap ti :+tabnext<CR><br>\n&quot; Move the tabs with tmn and tmi<br>\nmap tmn :-tabmove<CR><br>\nmap tmi :+tabmove<CR></p>\n<p>&quot; ===<br>\n&quot; === Other useful stuff<br>\n&quot; ===</p>\n<p>&quot; Press space twice to jump to the next ‘&lt;++&gt;’ and edit it<br>\nmap <LEADER><LEADER> <Esc>/&lt;++&gt;<CR>:nohlsearch<CR>c4i</p>\n<p>&quot; Toggle Spelling Check with <space>sc<br>\n&quot; &lt;z=&gt; 智能修改单词<br>\nmap <LEADER>sc :set spell!<CR><br>\nnoremap <C-x> bea<C-x>s<br>\ninoremap <C-x> <Esc>ea<C-x>s</p>\n<p>&quot; Press <code>to change case (instead of ~) map</code> ~</p>\n<p>imap <C-c> <Esc>zza<br>\nnmap <C-c> zz</p>\n<p>&quot; Auto change directory to current dir<br>\nautocmd BufEnter * silent! lcd %:p:h</p>\n<p>&quot; Call figlet<br>\nmap tx :r !figlet</p>\n<p>&quot; Compile function<br>\nmap r :call CompileRunGcc()<CR><br>\nfunc! CompileRunGcc()<br>\nexec “w”<br>\nif &amp;filetype == ‘c’<br>\nexec “!g++ % -o %&lt;”<br>\nexec “!time ./%&lt;”<br>\nelseif &amp;filetype == ‘cpp’<br>\nexec “!g++ % -o %&lt;”<br>\nexec “!time ./%&lt;”<br>\nelseif &amp;filetype == ‘java’<br>\nexec “!javac %”<br>\nexec “!time java %&lt;”<br>\nelseif &amp;filetype == ‘sh’<br>\n:!time bash %<br>\nelseif &amp;filetype == ‘python’<br>\nsilent! exec “!clear”<br>\nexec “!time python3 %”<br>\nelseif &amp;filetype == ‘html’<br>\nexec “!firefox % &amp;”<br>\nelseif &amp;filetype == ‘markdown’<br>\nexec “MarkdownPreview”<br>\nelseif &amp;filetype == ‘vimwiki’<br>\nexec “MarkdownPreview”<br>\nendif<br>\nendfunc</p>\n<p>map R :call CompileBuildrrr()<CR><br>\nfunc! CompileBuildrrr()<br>\nexec “w”<br>\nif &amp;filetype == ‘vim’<br>\nexec “source $MYVIMRC”<br>\nelseif &amp;filetype == ‘markdown’<br>\nexec “echo”<br>\nendif<br>\nendfunc</p>\n<p>&quot; ===<br>\n&quot; === Install Plugins with Vim-Plug<br>\n&quot; ===</p>\n<p>call plug#begin(‘~/.vim/plugged’)</p>\n<p>&quot; Pretty Dress<br>\nPlug ‘vim-airline/vim-airline’<br>\nPlug ‘vim-airline/vim-airline-themes’<br>\nPlug ‘connorholyday/vim-snazzy’<br>\nPlug ‘NLKNguyen/papercolor-theme’<br>\nPlug ‘ayu-theme/ayu-vim’<br>\nPlug ‘bling/vim-bufferline’</p>\n<p>&quot; File navigation<br>\nPlug ‘scrooloose/nerdtree’, { ‘on’: ‘NERDTreeToggle’ }<br>\nPlug ‘Xuyuanp/nerdtree-git-plugin’<br>\nPlug ‘ctrlpvim/ctrlp.vim’, { ‘on’: ‘CtrlP’ }</p>\n<p>&quot; Taglist<br>\nPlug ‘majutsushi/tagbar’, { ‘on’: ‘TagbarOpenAutoClose’ }</p>\n<p>&quot; Error checking<br>\nPlug ‘w0rp/ale’</p>\n<p>&quot; Auto Complete<br>\n&quot; Plug ‘Valloric/YouCompleteMe’<br>\nPlug ‘neoclide/coc.nvim’, {‘branch’: ‘release’}<br>\n&quot; Plug ‘davidhalter/jedi-vim’</p>\n<p>&quot; Undo Tree<br>\nPlug ‘mbbill/undotree/’</p>\n<p>&quot; Snippits<br>\n&quot; Plug ‘SirVer/ultisnips’  , { ‘for’: [‘vim-plug’, ‘python’] }<br>\n&quot; Plug ‘honza/vim-snippets’, { ‘for’: [‘vim-plug’, ‘python’] }</p>\n<p>&quot; Other visual enhancement<br>\nPlug ‘nathanaelkane/vim-indent-guides’<br>\nPlug ‘itchyny/vim-cursorword’<br>\nPlug ‘tmhedberg/SimpylFold’</p>\n<p>&quot; Git<br>\nPlug ‘rhysd/conflict-marker.vim’<br>\nPlug ‘tpope/vim-fugitive’<br>\nPlug ‘mhinz/vim-signify’<br>\nPlug ‘gisphm/vim-gitignore’, { ‘for’: [‘gitignore’, ‘vim-plug’] }</p>\n<p>&quot; HTML, CSS, JavaScript, PHP, JSON, etc.<br>\nPlug ‘elzr/vim-json’<br>\nPlug ‘hail2u/vim-css3-syntax’<br>\nPlug ‘spf13/PIV’, { ‘for’ :[‘php’, ‘vim-plug’] }<br>\nPlug ‘gko/vim-coloresque’, { ‘for’: [‘vim-plug’, ‘php’, ‘html’, ‘javascript’, ‘css’, ‘less’] }<br>\nPlug ‘pangloss/vim-javascript’, { ‘for’ :[‘javascript’, ‘vim-plug’] }<br>\nPlug ‘mattn/emmet-vim’</p>\n<p>&quot; Python<br>\nPlug ‘vim-scripts/indentpython.vim’<br>\n&quot; Plug ‘vim-python/python-syntax’, { ‘for’ :[‘python’, ‘vim-plug’] }</p>\n<p>&quot; Markdown<br>\nPlug ‘iamcco/markdown-preview.nvim’, { ‘do’: { -&gt; mkdp#util#install_sync() }, ‘for’ :[‘markdown’, ‘vim-plug’] }<br>\nPlug ‘dhruvasagar/vim-table-mode’, { ‘on’: ‘TableModeToggle’ }<br>\nPlug ‘vimwiki/vimwiki’</p>\n<p>&quot; For general writing<br>\nPlug ‘reedes/vim-wordy’<br>\nPlug ‘ron89/thesaurus_query.vim’</p>\n<p>&quot; Bookmarks<br>\nPlug ‘kshenoy/vim-signature’</p>\n<p>&quot; Other useful utilities<br>\nPlug ‘jiangmiao/auto-pairs’<br>\nPlug ‘terryma/vim-multiple-cursors’<br>\nPlug ‘junegunn/goyo.vim’ &quot; distraction free writing mode<br>\nPlug ‘ntpeters/vim-better-whitespace’, { ‘on’: [‘EnableWhitespace’, ‘ToggleWhitespace’] } &quot;displays trailing whitespace (after :EnableWhitespace, vim slows down)<br>\nPlug ‘tpope/vim-surround’ &quot; type ysks’ to wrap the word with ‘’ or type cs’<code>to change 'word' to</code>word`<br>\nPlug ‘godlygeek/tabular’ &quot; type ;Tabularize /= to align the =<br>\nPlug ‘gcmt/wildfire.vim’ &quot; in Visual mode, type i’ to select all text in ‘’, or type i) i] i} ip<br>\nPlug ‘scrooloose/nerdcommenter’ &quot; in <space>cc to comment a line</p>\n<p>&quot; Dependencies<br>\nPlug ‘MarcWeber/vim-addon-mw-utils’<br>\nPlug ‘kana/vim-textobj-user’<br>\nPlug ‘fadein/vim-FIGlet’</p>\n<p>call plug#end()</p>\n<p>&quot; ===<br>\n&quot; === Create a _machine_specific.vim file to adjust machine specific stuff, like python interpreter location<br>\n&quot; ===<br>\nlet has_machine_specific_file = 1<br>\nif empty(glob(‘~/.vim/_machine_specific.vim’))<br>\nlet has_machine_specific_file = 0<br>\nexec “!cp ~/.vim/default_configs/_machine_specific_default.vim ~/.vim/_machine_specific.vim”<br>\nendif<br>\nsource ~/.vim/_machine_specific.vim</p>\n<p>&quot; ===<br>\n&quot; === Dress up my vim<br>\n&quot; ===<br>\nmap <LEADER>c1 :set background=dark<CR>:colorscheme snazzy<CR>:AirlineTheme dracula<CR><br>\nmap <LEADER>c2 :set background=light<CR>:colorscheme ayu<CR>:AirlineTheme ayu_light<CR></p>\n<p>set termguicolors     &quot; enable true colors support<br>\nlet ayucolor=“light”  &quot; for light version of theme<br>\n&quot; let ayucolor=“mirage” &quot; for mirage version of theme<br>\n&quot; let ayucolor=“dark”   &quot; for dark version of theme<br>\ncolorscheme snazzy<br>\nlet g:SnazzyTransparent = 1<br>\nset background=dark<br>\nlet g:airline_theme=‘dracula’</p>\n<p>let g:lightline = {<br>\n\\     ‘active’: {<br>\n\\         ‘left’: [[‘mode’, ‘paste’ ], [‘readonly’, ‘filename’, ‘modified’]],<br>\n\\         ‘right’: [[‘lineinfo’], [‘percent’], [‘fileformat’, ‘fileencoding’]]<br>\n\\     }<br>\n\\ }</p>\n<p>&quot; set statusline+=%#warningmsg#<br>\n&quot; set statusline+=%{SyntasticStatuslineFlag()}<br>\n&quot; set statusline+=%*</p>\n<p>&quot; ===<br>\n&quot; === NERDTree<br>\n&quot; ===<br>\nmap tt :NERDTreeToggle<CR><br>\nlet NERDTreeMapOpenExpl = “”<br>\nlet NERDTreeMapUpdir = “”<br>\nlet NERDTreeMapUpdirKeepOpen = “l”<br>\nlet NERDTreeMapOpenSplit = “”<br>\nlet NERDTreeOpenVSplit = “”<br>\nlet NERDTreeMapActivateNode = “i”<br>\nlet NERDTreeMapOpenInTab = “o”<br>\nlet NERDTreeMapPreview = “”<br>\nlet NERDTreeMapCloseDir = “n”<br>\nlet NERDTreeMapChangeRoot = “y”</p>\n<p>&quot; ===<br>\n&quot; === You Complete ME<br>\n&quot; ===<br>\nnnoremap gd :YcmCompleter GoToDefinitionElseDeclaration<CR><br>\nnnoremap g/ :YcmCompleter GetDoc<CR><br>\nnnoremap gt :YcmCompleter GetType<CR><br>\nnnoremap gr :YcmCompleter GoToReferences<CR><br>\nlet g:ycm_autoclose_preview_window_after_completion=0<br>\nlet g:ycm_autoclose_preview_window_after_insertion=1<br>\nlet g:ycm_use_clangd = 0<br>\nlet g:ycm_python_binary_path = g:ycm_python_interpreter_path<br>\n&quot;let g:ycm_python_interpreter_path = system(‘which python3’)<br>\n&quot;let g:ycm_python_binary_path = system(‘which python3’)<br>\n&quot;let g:ycm_key_list_select_completion   = [‘<C-j>’, ‘<C-n>’, ‘<Down>’]<br>\n&quot;let g:ycm_key_list_previous_completion = [‘<C-k>’, ‘<C-p>’, ‘<Up>’]</p>\n<p>&quot; ===<br>\n&quot; === vim-indent-guide<br>\n&quot; ===<br>\nlet g:indent_guides_guide_size = 1<br>\nlet g:indent_guides_start_level = 2<br>\nlet g:indent_guides_enable_on_vim_startup = 1<br>\nlet g:indent_guides_color_change_percent = 1<br>\nsilent! unmap <LEADER>ig<br>\nautocmd WinEnter * silent! unmap <LEADER>ig</p>\n<p>&quot; ===<br>\n&quot; === ale<br>\n&quot; ===<br>\nlet b:ale_linters = [] &quot;[‘pylint’]<br>\n&quot; let b:ale_fixers = [‘autopep8’, ‘yapf’]<br>\nlet g:ale_python_pylint_options = “–extension-pkg-whitelist=pygame”</p>\n<p>&quot; ===<br>\n&quot; === MarkdownPreview<br>\n&quot; ===<br>\nlet g:mkdp_auto_start = 0<br>\nlet g:mkdp_auto_close = 1<br>\nlet g:mkdp_refresh_slow = 0<br>\nlet g:mkdp_command_for_global = 0<br>\nlet g:mkdp_open_to_the_world = 0<br>\nlet g:mkdp_open_ip = ‘’<br>\nlet g:mkdp_browser = ‘chromium’<br>\nlet g:mkdp_echo_preview_url = 0<br>\nlet g:mkdp_browserfunc = ‘’<br>\nlet g:mkdp_preview_options = {<br>\n\\ ‘mkit’: {},<br>\n\\ ‘katex’: {},<br>\n\\ ‘uml’: {},<br>\n\\ ‘maid’: {},<br>\n\\ ‘disable_sync_scroll’: 0,<br>\n\\ ‘sync_scroll_type’: ‘middle’,<br>\n\\ ‘hide_yaml_meta’: 1<br>\n\\ }<br>\nlet g:mkdp_markdown_css = ‘’<br>\nlet g:mkdp_highlight_css = ‘’<br>\nlet g:mkdp_port = ‘’<br>\nlet g:mkdp_page_title = ‘「${name}」’</p>\n<p>&quot; ===<br>\n&quot; === Python-syntax<br>\n&quot; ===<br>\nlet g:python_highlight_all = 1<br>\n&quot; let g:python_slow_sync = 0</p>\n<p>&quot; ===<br>\n&quot; === Taglist<br>\n&quot; ===<br>\nmap <silent> T :TagbarOpenAutoClose<CR></p>\n<p>&quot; ===<br>\n&quot; === vim-table-mode<br>\n&quot; ===<br>\nmap <LEADER>tm :TableModeToggle<CR></p>\n<p>&quot; ===<br>\n&quot; === CtrlP<br>\n&quot; ===<br>\nmap <C-p> :CtrlP<CR></p>\n<p>&quot; ===<br>\n&quot; === vim-better-whitespace<br>\n&quot; ===<br>\nlet g:better_whitespace_enabled=0</p>\n<p>&quot; ===<br>\n&quot; === Goyo<br>\n&quot; ===<br>\nmap <LEADER>gy :Goyo<CR></p>\n<p>&quot; ===<br>\n&quot; === CtrlP<br>\n&quot; ===<br>\nlet g:ctrlp_prompt_mappings = {<br>\n\\ ‘PrtSelectMove(“j”)’:   [‘<c-e>’, ‘<down>’],<br>\n\\ ‘PrtSelectMove(“k”)’:   [‘<c-u>’, ‘<up>’],<br>\n\\ }</p>\n<p>&quot; ===<br>\n&quot; === vim-signiture<br>\n&quot; ===<br>\nlet g:SignatureMap = {<br>\n\\ ‘Leader’             :  “m”,<br>\n\\ ‘PlaceNextMark’      :  “m,”,<br>\n\\ ‘ToggleMarkAtLine’   :  “m.”,<br>\n\\ ‘PurgeMarksAtLine’   :  “dm-”,<br>\n\\ ‘DeleteMark’         :  “dm”,<br>\n\\ ‘PurgeMarks’         :  “dm/”,<br>\n\\ ‘PurgeMarkers’       :  “dm?”,<br>\n\\ ‘GotoNextLineAlpha’  :  “m<LEADER>”,<br>\n\\ ‘GotoPrevLineAlpha’  :  “”,<br>\n\\ ‘GotoNextSpotAlpha’  :  “m<LEADER>”,<br>\n\\ ‘GotoPrevSpotAlpha’  :  “”,<br>\n\\ ‘GotoNextLineByPos’  :  “”,<br>\n\\ ‘GotoPrevLineByPos’  :  “”,<br>\n\\ ‘GotoNextSpotByPos’  :  “mn”,<br>\n\\ ‘GotoPrevSpotByPos’  :  “mp”,<br>\n\\ ‘GotoNextMarker’     :  “”,<br>\n\\ ‘GotoPrevMarker’     :  “”,<br>\n\\ ‘GotoNextMarkerAny’  :  “”,<br>\n\\ ‘GotoPrevMarkerAny’  :  “”,<br>\n\\ ‘ListLocalMarks’     :  “m/”,<br>\n\\ ‘ListLocalMarkers’   :  “m?”<br>\n\\ }</p>\n<p>&quot; ===<br>\n&quot; === Undotree<br>\n&quot; ===<br>\nlet g:undotree_DiffAutoOpen = 0<br>\nmap L :UndotreeToggle<CR></p>\n<p>&quot; ===<br>\n&quot; === UltiSnip<br>\n&quot; ===<br>\nautocmd WinEnter * silent! iunmap <C-z><br>\nautocmd WinEnter * silent! unmap <C-z><br>\nautocmd WinEnter * silent! vunmap <C-z><br>\nlet g:UltiSnipsExpandTrigger           = ‘<C-z>’<br>\nlet g:UltiSnipsJumpForwardTrigger      = ‘<C-z>’<br>\n&quot;let g:UltiSnipsJumpBackwardTrigger     = ‘<s-tab>’</p>\n<p>&quot; ==<br>\n&quot; == NERDTree-git<br>\n&quot; ==<br>\nlet g:NERDTreeIndicatorMapCustom = {<br>\n\\ “Modified”  : “✹”,<br>\n\\ “Staged”    : “✚”,<br>\n\\ “Untracked” : “✭”,<br>\n\\ “Renamed”   : “➜”,<br>\n\\ “Unmerged”  : “═”,<br>\n\\ “Deleted”   : “✖”,<br>\n\\ “Dirty”     : “✗”,<br>\n\\ “Clean”     : “✔︎”,<br>\n\\ “Unknown”   : “?”<br>\n\\ }</p>\n<p>&quot; Testring my own plugin<br>\nif !empty(glob(‘~/Github/vim-calc/vim-calc.vim’))<br>\nsource ~/Github/vim-calc/vim-calc.vim<br>\nendif<br>\n&quot; map <LEADER>a :call Calc()<CR></p>\n<p>&quot; ==<br>\n&quot; == vim-multiple-cursor<br>\n&quot; ==<br>\nlet g:multi_cursor_use_default_mapping=0<br>\nlet g:multi_cursor_start_word_key      = ‘<c-k>’<br>\nlet g:multi_cursor_select_all_word_key = ‘<a-k>’<br>\nlet g:multi_cursor_start_key           = ‘g<c-k>’<br>\nlet g:multi_cursor_select_all_key      = ‘g<a-k>’<br>\nlet g:multi_cursor_next_key            = ‘<c-k>’<br>\nlet g:multi_cursor_prev_key            = ‘<c-p>’<br>\nlet g:multi_cursor_skip_key            = ‘<C-x>’<br>\nlet g:multi_cursor_quit_key            = ‘<Esc>’</p>\n<p>let g:vimwiki_list = [{<br>\n\\ ‘automatic_nested_syntaxes’:1,<br>\n\\ ‘path_html’: ‘~/wiki_html’,<br>\n\\ ‘path’: ‘~/wiki’,<br>\n\\ ‘template_path’: ‘~/.vim/vimwiki/template/’,<br>\n\\ ‘syntax’: ‘markdown’,<br>\n\\ ‘ext’:‘.md’,<br>\n\\ ‘template_default’:‘markdown’,<br>\n\\ ‘custom_wiki2html’: ‘~/.vim/vimwiki/wiki2html.sh’,<br>\n\\ ‘template_ext’:‘.html’<br>\n}]</p>\n<p>au BufRead,BufNewFile *.md set filetype=vimwiki</p>\n<p>let g:taskwiki_sort_orders={“C”: “pri-”}<br>\nlet g:taskwiki_syntax = ‘markdown’<br>\nlet g:taskwiki_markdown_syntax=‘markdown’<br>\nlet g:taskwiki_markup_syntax=‘markdown’<br>\nsource ~/.vim/snippits.vim</p>\n<p>&quot; === Experimenting coc.nvim features<br>\nset timeoutlen=100<br>\nset cmdheight=2</p>\n<p>inoremap <C-d> <Esc>:set cmdheight=2<CR>a<br>\ninoremap <C-t> <Esc>:set cmdheight=10<CR>a<br>\nnnoremap <C-d> :set cmdheight=2<CR><br>\nnnoremap <C-t> :set cmdheight=10<CR></p>\n<p>set updatetime=1000<br>\nset shortmess+=c<br>\nset signcolumn=yes<br>\ninoremap <silent><expr> <TAB><br>\n\\ pumvisible() ? “&lt;C-n&gt;” :<br>\n\\ <SID>check_back_space() ? “&lt;TAB&gt;” :<br>\n\\ coc#refresh()<br>\ninoremap <expr><S-TAB> pumvisible() ? “&lt;C-p&gt;” : “&lt;C-h&gt;”</p>\n<p>function! s:check_back_space() abort<br>\nlet col = col(‘.’) - 1<br>\nreturn !col || getline(‘.’)[col - 1]  =~# ‘\\s’<br>\nendfunction<br>\n&quot; Use <cr> to confirm completion, <code>&lt;C-g&gt;u</code> means break undo chain at current position.<br>\n&quot; Coc only does snippet and additional edit on confirm.<br>\ninoremap <expr> <cr> pumvisible() ? “&lt;C-y&gt;” : “&lt;C-g&gt;u&lt;CR&gt;”<br>\n&quot; Use K to show documentation in preview window<br>\nnnoremap ? :call <SID>show_documentation()<CR><br>\nfunction! s:show_documentation()<br>\nif (index([‘vim’,‘help’], &amp;filetype) &gt;= 0)<br>\nexecute ‘h ‘.expand(’<cword>’)<br>\nelse<br>\ncall CocAction(‘doHover’)<br>\nendif<br>\nendfunction</p>\n<p>&quot; Highlight symbol under cursor on CursorHold<br>\nautocmd CursorHold * silent call CocActionAsync(‘highlight’)<br>\n&quot;<br>\n&quot; Open the _machine_specific.vim file if it has just been created<br>\nif has_machine_specific_file == 0<br>\nexec “e ~/.vim/_machine_specific.vim”<br>\nendif</p>\n","prev":{"title":"JS","link":"2021/03/19/JS"},"next":{"title":"本地 Docker 搭建 Nginx 反向代理 Nacos 集群","link":"2021/03/19/本地 Docker 搭建 Nginx 反向代理 Nacos 集群"},"plink":"https://blog.liumulin.top/2021/03/19/vim-config/","reward":true,"copyright":{"custom":"不许转载😡！！！"}}