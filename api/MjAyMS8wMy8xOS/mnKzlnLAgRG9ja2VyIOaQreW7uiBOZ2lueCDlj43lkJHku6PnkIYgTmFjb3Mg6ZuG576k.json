{"title":"本地 Docker 搭建 Nginx 反向代理 Nacos 集群","date":"2021-03-19T08:41:29.000Z","date_formatted":{"ll":"2021年3月19日","L":"2021/03/19","MM-DD":"03-19"},"link":"2021/03/19/本地 Docker 搭建 Nginx 反向代理 Nacos 集群","comments":true,"tags":["Docker"],"updated":"2022-11-16T02:30:28.836Z","content":"<h1 id=\"本地-docker-搭建-nginx-反向代理-nacos-集群\">本地 Docker 搭建 Nginx 反向代理 Nacos 集群<a title=\"#本地-docker-搭建-nginx-反向代理-nacos-集群\" href=\"#本地-docker-搭建-nginx-反向代理-nacos-集群\"></a></h1>\n<blockquote>\n<p>Nginx 从入门到实践，万字详解！：<a href=\"https://mp.weixin.qq.com/s/hafErlto-1N6ypYfOVIGBQ\">https://mp.weixin.qq.com/s/hafErlto-1N6ypYfOVIGBQ</a></p>\n</blockquote>\n<h3 id=\"搭建-nacos-集群\">搭建 Nacos 集群<a title=\"#搭建-nacos-集群\" href=\"#搭建-nacos-集群\"></a></h3>\n<blockquote>\n<p>官网地址：<a href=\"https://nacos.io/zh-cn/docs/quick-start-docker.html\">https://nacos.io/zh-cn/docs/quick-start-docker.html</a></p>\n</blockquote>\n<ul>\n<li>\n<p>Clone 项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/nacos-group/nacos-docker.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> nacos-docker</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>查看目录结构</p>\n<blockquote>\n<p>tree .</p>\n</blockquote>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── README.md</span><br><span class=\"line\">├── README_ZH.md</span><br><span class=\"line\">├── build\t\t\t\t\t\t\t\t <span class=\"comment\"># nacos 镜像制做的源码 </span></span><br><span class=\"line\">│   ├── Dockerfile</span><br><span class=\"line\">│   ├── bin</span><br><span class=\"line\">│   │   └── docker<span class=\"literal\">-startup</span>.sh</span><br><span class=\"line\">│   ├── conf</span><br><span class=\"line\">│   │   └── application.properties</span><br><span class=\"line\">│   └── init.d</span><br><span class=\"line\">│       └── custom.properties</span><br><span class=\"line\">├── changlog</span><br><span class=\"line\">├── env\t\t\t\t\t\t\t\t\t <span class=\"comment\"># docker compose 环境变量 </span></span><br><span class=\"line\">│   ├── mysql.env</span><br><span class=\"line\">│   ├── nacos<span class=\"literal\">-embedded</span>.env</span><br><span class=\"line\">│   ├── nacos<span class=\"literal\">-hostname</span>.env</span><br><span class=\"line\">│   ├── nacos<span class=\"literal\">-ip</span>.env</span><br><span class=\"line\">│   └── nacos<span class=\"literal\">-standlone</span><span class=\"literal\">-mysql</span>.env</span><br><span class=\"line\">└── example\t\t\t\t\t\t\t\t <span class=\"comment\"># docker compose 编排文件</span></span><br><span class=\"line\">    ├── cluster<span class=\"literal\">-embedded</span>.yaml</span><br><span class=\"line\">    ├── cluster<span class=\"literal\">-hostname</span>.yaml</span><br><span class=\"line\">    ├── cluster<span class=\"literal\">-ip</span>.yaml</span><br><span class=\"line\">    ├── init.d</span><br><span class=\"line\">    │   └── custom.properties</span><br><span class=\"line\">    ├── prometheus</span><br><span class=\"line\">    │   ├── prometheus<span class=\"literal\">-cluster</span>.yaml</span><br><span class=\"line\">    │   └── prometheus<span class=\"literal\">-standalone</span>.yaml\t\t</span><br><span class=\"line\">    ├── standalone<span class=\"literal\">-derby</span>.yaml</span><br><span class=\"line\">    ├── standalone<span class=\"literal\">-mysql</span><span class=\"literal\">-5</span>.<span class=\"number\">7</span>.yaml</span><br><span class=\"line\">    └── standalone<span class=\"literal\">-mysql</span><span class=\"literal\">-8</span>.yaml</span><br><span class=\"line\">```- 单机模式 Derby```</span><br><span class=\"line\">docker<span class=\"literal\">-compose</span> <span class=\"operator\">-f</span> example/standalone<span class=\"literal\">-derby</span>.yaml up</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>单机模式 MySQL</p>\n<p>如果希望使用 MySQL5.7</p>\n<p><code>docker-compose -f example/standalone-mysql-5.7.yaml up</code></p>\n<p>如果希望使用 MySQL8</p>\n<p><code>docker-compose -f example/standalone-mysql-8.yaml up</code></p>\n</li>\n<li>\n<p>集群模式</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker<span class=\"literal\">-compose</span> <span class=\"operator\">-f</span> example/cluster<span class=\"literal\">-hostname</span>.yaml up</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>若启动后连接不上 mysql ，需要将配置自动生成的 volumes 卷轴文件夹删除（volumes: - ./mysql:/var/lib/mysql）</p>\n</blockquote>\n<p>启动：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$</span>: docker run -<span class=\"literal\">-name</span> my<span class=\"literal\">-nginx</span> <span class=\"literal\">-p</span> <span class=\"number\">8888</span>:<span class=\"number\">80</span> <span class=\"literal\">-v</span> <span class=\"string\">&quot;<span class=\"variable\">$PWD</span>/html&quot;</span>:/user/share/nginx/html  <span class=\"literal\">-v</span> <span class=\"string\">&quot;<span class=\"variable\">$PWD</span>/conf&quot;</span>:/etc/nginx <span class=\"literal\">-d</span> nginx</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>PWD：当前目录</p>\n</blockquote>\n<p>自定义配置 nginx.cong 中的 server_name <a href=\"http://www.linlin.com\">www.linlin.com</a> 配置到 hosts 中 120.0.0.1 <a href=\"http://www.linlin.com\">www.linlin.com</a></p>\n<p>访问浏览器：<a href=\"http://www.linlin.com:8888/nacos\">www.linlin.com:8888/nacos</a></p>\n<blockquote>\n<p>配置好 Nginx 反向代理后，若出现无法访问，列出以下几种情况：</p>\n<ol>\n<li>404 检查负载均衡到对应的端口没，我的情况是从 git 拉下来的 Nacos 配置代码里端口映射的有了 “9555:9555” ，但 ngnix.conf 里的 upstream 中没有配置该端口，所以负载均衡到 9555 端口出现 404</li>\n<li>在配置 hosts 之前提前访问了 <a href=\"http://www.linlin.com\">www.linlin.com</a> ，此时未走 127.0.0.1 页面出现 462，再次访问时会走浏览器缓存。反复都会页面 462，所以需要重新配置 server_name 或者强制清除缓存</li>\n</ol>\n</blockquote>\n","prev":{"title":"vim-config","link":"2021/03/19/vim-config"},"next":{"title":"算法与数据结构","link":"2021/03/19/算法与数据结构"},"plink":"https://blog.liumulin.top/2021/03/19/本地 Docker 搭建 Nginx 反向代理 Nacos 集群/","toc":[{"id":"本地-docker-搭建-nginx-反向代理-nacos-集群","title":"本地 Docker 搭建 Nginx 反向代理 Nacos 集群","index":"1","children":[{"id":"搭建-nacos-集群","title":"搭建 Nacos 集群","index":"1.1"}]}],"reward":true,"copyright":{"custom":"不许转载😡！！！"}}